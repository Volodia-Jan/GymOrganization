// <auto-generated />
using System;
using GymOrganization.Infrastructure.ApplicationDbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymOrganization.Infrastructure.Migrations
{
    [DbContext(typeof(GymOrganizationDbContext))]
    partial class GymOrganizationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("GymOrganization.Infrastructure.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f32ee00-8974-4215-8fd8-07e0befaf890"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b7612d57-bb44-4913-8c7f-8a6aba4fe3d5"),
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = new Guid("4a1999ca-3693-4f60-afbe-22a77fef2f09"),
                            Name = "Coach",
                            NormalizedName = "COACH"
                        });
                });

            modelBuilder.Entity("GymOrganization.Infrastructure.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e563aa88-86b1-4c69-a0f8-496b53c9ac26"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "226f3afa-8726-4744-a564-072ff91a91b7",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jsmith@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JSMITH@EXAMPLE.COM",
                            NormalizedUserName = "JSMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENKTwbAxJimwGDlPS3+r8hThiWvLr1kOZxoh9lsJ0U4+iNT4cMeTur4xhTTeidoE5A==",
                            PhoneNumber = "+1-555-123-4567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17aaa421-da27-4ea6-bfc1-ce988d2d5897",
                            TwoFactorEnabled = false,
                            UserName = "jsmith@example.com"
                        },
                        new
                        {
                            Id = new Guid("d4a4a0ca-d7cb-4e8f-8c58-34535c9eab5b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2ec8156-f8b9-4dd9-a6f9-d71fd2717288",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jdoe@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JDOE@EXAMPLE.COM",
                            NormalizedUserName = "JDOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOoLHCJXt53KUp6J3KEPefCV4rujv2eddxfygfY2cZQd0yZcYPKEvqjED4eZBmM8Zw==",
                            PhoneNumber = "+1-555-987-6543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de0504f0-497a-4c7c-9b61-2558cd1411c4",
                            TwoFactorEnabled = false,
                            UserName = "jdoe@example.com"
                        },
                        new
                        {
                            Id = new Guid("87d8fde7-99da-4a9c-9cfc-64bfc84d7196"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97fd35e1-e412-40db-a262-4e4dcdf07375",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bjohnson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BJOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BJOHNSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI5MOcBrWZCBhMG+GrUA5+Sw/20g9POzQRAZNW1AeDvUHcJnQWUjpwUnHxcNPGnNjQ==",
                            PhoneNumber = "+1-555-555-1212",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b3dc11d-023c-4b26-bfe4-b46daeb9fe06",
                            TwoFactorEnabled = false,
                            UserName = "bjohnson@example.com"
                        },
                        new
                        {
                            Id = new Guid("1e9deac9-7e9d-46d6-997a-32efdf6d5f6c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3511c688-8cd9-41ac-bfb0-09afcd866ded",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asmith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASMITH@EXAMPLE.COM",
                            NormalizedUserName = "ASMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEV5CN7h4sg4CHu5fjOt1B0I2FbNfCVk2+qOiwbWMcobp5hC+InnXhA0Za0oW0GQw==",
                            PhoneNumber = "+1-555-999-1212",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "570f74d9-82fc-4d68-beb0-835ee8dffb3a",
                            TwoFactorEnabled = false,
                            UserName = "asmith@example.com"
                        },
                        new
                        {
                            Id = new Guid("af690bfe-f82e-4856-b8dc-1075a5f5c6b9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fcf0fc69-74a2-45c5-b8ea-fdb08a407a9c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tlee@example.com",
                            EmailConfirmed = false,
                            FirstName = "Tom",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "TLEE@EXAMPLE.COM",
                            NormalizedUserName = "TLEE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsHuZU46PQn0H4XVREZtqg47lTOIvwoIEqfRfSeVKKLqA+j4locrDaxG0rWIXnHvQ==",
                            PhoneNumber = "+1-555-444-1212",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7ac58f8-d3d7-4349-a906-eb09f8c6c167",
                            TwoFactorEnabled = false,
                            UserName = "tlee@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d4a4a0ca-d7cb-4e8f-8c58-34535c9eab5b"),
                            RoleId = new Guid("2f32ee00-8974-4215-8fd8-07e0befaf890")
                        },
                        new
                        {
                            UserId = new Guid("e563aa88-86b1-4c69-a0f8-496b53c9ac26"),
                            RoleId = new Guid("4a1999ca-3693-4f60-afbe-22a77fef2f09")
                        },
                        new
                        {
                            UserId = new Guid("87d8fde7-99da-4a9c-9cfc-64bfc84d7196"),
                            RoleId = new Guid("4a1999ca-3693-4f60-afbe-22a77fef2f09")
                        },
                        new
                        {
                            UserId = new Guid("1e9deac9-7e9d-46d6-997a-32efdf6d5f6c"),
                            RoleId = new Guid("b7612d57-bb44-4913-8c7f-8a6aba4fe3d5")
                        },
                        new
                        {
                            UserId = new Guid("af690bfe-f82e-4856-b8dc-1075a5f5c6b9"),
                            RoleId = new Guid("b7612d57-bb44-4913-8c7f-8a6aba4fe3d5")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GymOrganization.Infrastructure.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GymOrganization.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GymOrganization.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GymOrganization.Infrastructure.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymOrganization.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GymOrganization.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
